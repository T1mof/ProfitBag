from aiogram import Router, types
from aiogram.filters import Command
from sqlalchemy.future import select
import logging
from data.models import User, UserCoin, PortfolioHistory
from bot.utils.db_pool import db
from bot.utils.api_requests import fetch_crypto_price

get_portfolio_router = Router()
logger = logging.getLogger(__name__)


@get_portfolio_router.message(Command("portfolio"))
async def show_portfolio(message: types.Message):
    status_msg = await message.answer("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ...")
    try:
        telegram_id = int(message.from_user.id)
        session_factory = db.get_session()
        async with session_factory() as session:
            result = await session.execute(select(User).filter_by(telegram_id=telegram_id))
            user = result.scalars().first()
            if not user:
                await status_msg.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.")
                return
            coins_result = await session.execute(select(UserCoin).filter_by(user_id=user.user_id))
            user_coins = list(coins_result.scalars().all())
            if not user_coins:
                await status_msg.edit_text("–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.")
                return

            portfolio_text = "üìä <b>–í–∞—à –∫—Ä–∏–ø—Ç–æ–ø–æ—Ä—Ç—Ñ–µ–ª—å:</b>\n\n"
            total_value = 0
            total_actual = 0

            for coin in user_coins:
                ticker = coin.coin.upper()
                amount = float(coin.amount)
                purchase_price = float(coin.purchase_price)
                value = amount * purchase_price
                total_value += value

                try:
                    actual_price = await fetch_crypto_price(ticker)
                    actual_value = amount * actual_price
                    total_actual += actual_value
                    actual_price_str = f"{actual_price:.2f} USDT"
                    actual_value_str = f"{actual_value:.2f} USDT"
                except Exception:
                    actual_price_str = "–Ω/–¥"
                    actual_value_str = "–Ω/–¥"

                portfolio_text += (
                    f"ü™ô <b>{ticker}</b>: {amount} –º–æ–Ω–µ—Ç\n"
                    f"   üí∞ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {purchase_price} USDT\n"
                    f"   üåê –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {actual_price_str}\n"
                    f"   üíµ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {actual_value_str}\n\n"
                )

            portfolio_text += (
                f"<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è (–ø–æ —Ü–µ–Ω–∞–º –ø–æ–∫—É–ø–∫–∏):</b> {total_value:.2f} USDT\n"
                f"<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è (–ø–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Ü–µ–Ω–∞–º):</b> {total_actual:.2f} USDT"
            )

            await status_msg.edit_text(portfolio_text)
    except Exception as e:
        await status_msg.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")



@get_portfolio_router.callback_query(lambda c: c.data == "portfolio_change")
async def show_portfolio_history(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è.
    """
    await callback.answer()
    status_msg = await callback.message.answer("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")

    try:
        telegram_id = int(callback.from_user.id)

        session_factory = db.get_session()
        if session_factory is None:
            await status_msg.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            return

        async with session_factory() as session:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_result = await session.execute(select(User).filter_by(telegram_id=telegram_id))
            user = user_result.scalars().first()

            if not user:
                await status_msg.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Ä—Ç—Ñ–µ–ª—è
            history_result = await session.execute(
                select(PortfolioHistory)
                .filter_by(user_id=user.user_id)
                .order_by(PortfolioHistory.timestamp.desc())
                .limit(20)
            )
            history = list(history_result.scalars().all())

            if not history:
                await status_msg.edit_text(
                    "–î–∞–Ω–Ω—ã–µ –æ –¥–∏–Ω–∞–º–∏–∫–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –î–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
            text = "üìà <b>–î–∏–Ω–∞–º–∏–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è:</b>\n\n"

            # –í—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
            for record in list(reversed(history))[:10]:
                date_str = record.timestamp.strftime('%Y-%m-%d %H:%M:%S')
                text += f"{date_str}: {float(record.total_value):.2f} USDT\n"

            # –ù–∞—Ö–æ–¥–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
            if len(history) >= 2:
                latest_value = float(history[0].total_value)
                oldest_value = float(history[-1].total_value)
                percent_change = ((latest_value - oldest_value) / oldest_value) * 100 if oldest_value > 0 else 0

                text += f"\n<b>–û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {percent_change:.2f}%"

                if percent_change > 0:
                    text += " üìà"
                elif percent_change < 0:
                    text += " üìâ"

            await status_msg.edit_text(text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}", exc_info=True)
        await status_msg.edit_text(
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è.\n"
            f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
